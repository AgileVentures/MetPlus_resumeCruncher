#!/bin/bash 

# restore maven dependencies downloaded in a previous build,
# so they do not have to be downloaded again.  
# /tmp/artifacts will only be present in the incremental build scenario
# in which the target image name is an existing docker image which contains
# dependencies from a prior build execution.
function restore_saved_artifacts() {
  if [ -f /tmp/artifacts/maven.tar.gz ]; then
    pushd / &> /dev/null
    echo -n "Restoring saved artifacts from prior build..."
    tar zxf /tmp/artifacts/maven.tar.gz
    echo "...done"
    popd &> /dev/null
  fi
}

# Source code provided to STI will be bind-mounted at /tmp/src
# and then copied into /opt/wildfly/source for building.
#local_source_dir=/opt/wildfly/source
#mkdir -p $local_source_dir
local_source_dir=$(pwd)/src

# Resulting WAR files will be deployed to /wildfly/standalone/deployments
deploy_dir=/wildfly/standalone/deployments
mkdir -p $deploy_dir

# Copy the source from the bind mount in preparation for compilation
#cp -ad /tmp/src/* $local_source_dir

restore_saved_artifacts
ls -ltra

export JAVA_HOME=/etc/alternatives/java_sdk_1.8.0  
export PATH=$JAVA_HOME/bin:$PATH
pushd $local_source_dir &> /dev/null
ls -ltra

sed -i.bak "s#SENTRY_DSN#$SENTRY_DSN#" app/src/main/resources/prod_logback.xml
mv app/src/main/resources/prod_logback.xml app/src/main/resources/logback.xml
SPRING_PROFILES_ACTIVE=production ./gradlew wrapper stage
mv app/build/libs/app.war $deploy_dir >& /dev/null
./gradlew clean

popd &> /dev/null

