buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.6'
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'application'
apply plugin: 'org.springframework.boot'
if (System.env.SPRING_PROFILES_ACTIVE.equals('production')) {
    apply plugin: 'war'
}
apply plugin: 'org.asciidoctor.convert'
mainClassName = 'org.metplus.curriculum.Application'

dependencies {
    compile project(':database')
    compile project(':core')
    compile project(':expressionCruncher')
    compile project(':naiveBayesClassifier')
    compile("org.springframework.boot:spring-boot-actuator")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-aop'

    if (System.env.SPRING_PROFILES_ACTIVE.equals('production')) {
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }

    compile('net.sf.ehcache:ehcache-core:2.6.9') {
        exclude group: 'commons-logging'
    }
    compile 'com.google.guava:guava:18.0'
    testCompile 'org.hamcrest:hamcrest-core'
    testCompile 'org.hamcrest:hamcrest-library'
    testCompile 'org.mockito:mockito-core:2.19.1'
//    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
//    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.jayway.jsonpath:json-path'
}

task copyLicense {
    outputs.file new File("$buildDir/LICENSE.md")
    doLast {
        copy {
            from "LICENSE.md"
            into "$buildDir"
        }
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task startCruncher {
    doLast {
        bootRun {
            systemProperties = System.properties
            systemProperty "spring.profiles.active", System.env.SPRING_PROFILES_ACTIVE != null ? System.env.SPRING_PROFILES_ACTIVE : "development"
        }
    }
}

startCruncher.finalizedBy bootRun

applicationDistribution.from(copyLicense) {
    into ""
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}
asciidoctorj {
    version = '1.5.3'
}
asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
    backends 'html5'
    attributes 'build-gradle': file('build.gradle'),
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'endpoint-url': 'http://example.org',
            'source-highlighter': 'coderay',
            'imagesdir': './images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true'
}


task stage(type: Copy, dependsOn: [clean, build]) {
}

stage.mustRunAfter(clean)

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(stage)) {
        test.enabled = false
        asciidoctor.enabled = false
    }
}


if (System.env.SPRING_PROFILES_ACTIVE.equals('production')) {
    tasks.test.enabled = false
    tasks.asciidoctor.enabled = false
}

clean {
    doLast {
        project.file('cruncher.jar').delete()
    }
}

processResources {
    with copySpec {
        from 'src/main/resources/template/logback.xml'
        into ''
        expand SENTRY_DSN: System.env.SENTRY_DSN
    }
}